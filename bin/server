#!/bin/bash

##############################################################################
# Entrypoint for the cli interface
#
# This script contains functions for general server management, and serves as
# the entrypoint to all the other scripts. Based on the arguments passed to it,
# it will either run the appropriate function, or load the necessary subcommand
# script. If a `.env` file is not found at the root of the project, will invoke
# the setup script.
##############################################################################

auto_renew_certs() {
    ssh -t $user@$ip email=$email "$(< $SCRIPTS/snippets/letsencrypt-cronjob.sh)"
    [[ $? -eq 0 ]] && echo 'Autorenewal enabled!'
}

upload_file() {
	while [[ $# -gt 0 ]] ; do
		arg=$1 ; shift
		case $arg in
			-d|--destination) destination=$1 ; shift;;
			--destination=*) destination=${arg#*=};;
			-f|--file) file=$1 ; shift;;
			--file=*) file=${arg#*=} ; file="${file/#\~/$HOME}";;
			*) echo "Unknown argument: $arg" ; exit 1;;
		esac
	done
    if [[ -z $file ]] ; then
		cat <<-.
		Upload a file to the server. Optionally specify a destination, otherwise
		will default to your home directory

		-f|--file <filepath>           -- path to the file to upload
		-d|--destination <destination> -- (optional) destination for the file on
		                                  the server

		Examples:
		    $(basename $0) upload -f ~/Downloads/mycat.png -d /var/www/example.com/uploads/mycat.png
		    $(basename $0) upload --file=migration.sql
		    $(basename $0) upload --file ~/IdeaProjects/blog/seeder.sql
		.
		die
    fi
	if [[ ! -e $file ]]; then
		echo 'It appears as though that file does not exist!'
		exit 1
	fi

	scp -r "$file" "$user@$ip:$destination"
}

destroy_server() {
	cat <<-.
	This command will remove any knowledge this setup or your local machine has
	of the server. It will *not* remove the server from your VPS provider.

	*** IF YOU HAVE DATABASE BACKUPS, THIS WILL REMOVE THEM ***

	You might want to copy/move $DATA_DIR/db-backups

	Are you absolutely sure you want to do this?

	Type "destroy the server" to continue
	.
	IFS= read input
	if [[ "$input" != "destroy the server" ]] ; then
		die 'Aborting...'
	else
		echo 'Destroying...'
		rm -rfv $DATA_DIR
		rm -v /usr/local/bin/$SCRIPT_NAME
		echo "Removing $ip from ~/.ssh/known_hosts"
		sed -i -e /^$ip/d $HOME/.ssh/known_hosts
	fi
}

restart_service() {
	while [[ $# -gt 0 ]] ; do
	    arg=$1 ; shift
	    case $arg in
			-s|--service) service=$1 ; shift;;
			--service=*) service=${arg#*=};;
			*) echo "Unknown argument: $arg" ; exit 1;;
	    esac
	done
	if [[ -z $service ]]; then
		cat <<-.
		Restart a service

		-s|--service <service> -- name of the service to restart

		Examples:
		    $(basename $0) restart -s nginx
		    $(basename $0) restart --service tomcat
		.
		die
	fi
	ssh -t $user@$ip "sudo systemctl restart $service"
	[[ $? -eq 0 ]] && echo "$service restarted!"
}

add_user() {
	while [[ $# -gt 0 ]] ; do
	    arg=$1 ; shift
	    case $arg in
	        -f|--sshkeyfile) sshkeyfile=$1 ; shift;;
	        --sshkeyfile=*) sshkeyfile=${arg#*=} ; sshkeyfile="${sshkeyfile/#\~/$HOME}";;
			-u|--user) new_user=$1 ; shift;;
			--user=*) new_user=${arg#*=};;
			*) echo "Unknown argument: $arg" ; exit 1;;
	    esac
	done
    if [[ -z $new_user ]] || [[ -z $sshkeyfile ]] ; then
		cat <<-.
		Add a new admin user to the server.
		A password will be randomly generated for the new user.

		-f|--sshkeyfile <sshkeyfile> -- path to the new user's public key
		-u|--user <username>         -- username for the new user

		Examples:
		    $(basename $0) adduser -u sally -f ~/sallys-ssh-key.pub
		    $(basename $0) adduser --user=sally --sshkeyfile=~/key.pub
		.
		die
    fi
	if [[ ! -f $sshkeyfile ]]; then
		echo 'Please enter a valid ssh key file.'
		exit 1
	fi

	password="$(mkpassword)"
	echo "User ${new_user}: $password" >> $DATA_DIR/credentials.txt

	echo "Password for ${new_user}: $password"
	echo "[NOTICE]"
	echo "    credentials for ${new_user} have been added to $BASE_DIR/credentials.txt"
	echo "Creating user ${new_user}... (enter *your* sudo password when prompted)"

	ssh -t $user@$ip "
	sudo useradd --create-home --shell /bin/bash --groups sudo,tomcat,git,www-data $new_user
	echo '$new_user:$password' | sudo chpasswd
	sudo mkdir -p /home/$new_user/.ssh
	cat <<< '$(cat $sshkeyfile)' | sudo tee /home/$new_user/.ssh/authorized_keys >/dev/null
	sudo chown --recursive $new_user:$new_user /home/$new_user
	"
	[[ $? -eq 0 ]] && echo "User ${new_user} created!"
}

add_sshkey() {
	while [[ $# -gt 0 ]] ; do
	    arg=$1 ; shift
	    case $arg in
	        -f|--sshkeyfile) sshkeyfile=$1 ; shift;;
	        --sshkeyfile=*) sshkeyfile=${arg#*=} ; sshkeyfile="${sshkeyfile/#\~/$HOME}";;
	        *) echo "Unknown argument: $arg" ; exit 1;;
	    esac
	done
    if [[ -z $sshkeyfile ]] ; then
		cat <<-.
		Add an additional authorized ssh key to your account

		-f|--sshkeyfile <sshkeyfile> -- path to the public ssh key to add

		Examples:
		    $(basename $0) addkey -f ~/.ssh/my-other-computer.pub
		    $(basename $0) addkey --sshkeyfile ~/my-other-computer.pub
		.
		die
    fi
	if [[ ! -f $sshkeyfile ]] ; then
		die "It looks like $sshkeyfile does not exist!"
	fi

	cat $sshkeyfile | ssh $user@$ip 'cat >> .ssh/authorized_keys'
	[[ $? -eq 0 ]] && echo 'ssh key added!'
}

show_info() {
	cat <<-info
		Information about your server:

		ip address: $ip
		login:      $user

		MySQL port: 3306
		ssh port:   22

		data directory: $DATA_DIR
		command:        $0
		base directory: $BASE_DIR
	info
}

show_usage() {
	cat <<-help_message
	$(basename $0) -- command for server management
	usage

	    $(basename $0) <command> [options]

	where <command> is one of the following:

	    site -- manage sites
	    db   -- manage databases

	    devserver -- development web server

	    login       -- login to the server
	    info        -- display information about the server
	    ping        -- ping the server
	    autorenew   -- setup ssl certs to be automatically renewed
	    reboot      -- reboot the server
	    run         -- run arbitrary commands
	    log:cat     -- view the contents (cat) of /opt/tomcat/logs/catalina.out
	    log:tail    -- follow (tail -f) the contents of /opt/tomcat/logs/catalina.out
	    credentials -- view server credentials (found in $DATA_DIR/credentials.txt)
	    destroy     -- destroy the server

	    bash-completion -- generate bash tab completion script

	    upload  -f <file> [-d <destination>]
	    restart -s <service>
	    addkey  -f <sshkeyfile>
	    adduser -u <username> -f <sshkeyfile>

	help_message
}

# find out where this script is located so we can be sure we're running
# everything from the correct location
SCRIPT_PATH="$0"
SCRIPT_NAME="$(basename $SCRIPT_PATH)"
# I'd really rather not do this with python, but we need to find the
# installation location if this script is symlinked, and this is the only way
# that works between both MacOS and (probably most) Linuxes (assuming a python).
# The inline python code does work on both python2 and python3
which python >/dev/null && PYTHON=python || PYTHON=python3
SCRIPT_PATH="$($PYTHON -c "import os; print(os.path.realpath('$SCRIPT_PATH'))")"
BASE_DIR="$(dirname "$(dirname $SCRIPT_PATH)")"

DATA_DIR="$HOME/.cods/$SCRIPT_NAME"
ENV_FILE="$DATA_DIR/env.sh"
TEMPLATES="$BASE_DIR/templates"
SCRIPTS="$BASE_DIR/scripts"
SNIPPETS="$SCRIPTS/snippets"

source $SCRIPTS/util.sh
source $ENV_FILE
# sanity check, make sure we have the values we need from the .env file
if [[ ! -f $ENV_FILE || -z $user || -z $ip ]] ; then
	echo "It looks like the .env file ($ENV_FILE) is not setup properly."
	die 'Are both `user` and `ip` set and not blank?'
fi

command=$1
shift

case $command in
	# sub commands
	site)      source $SCRIPTS/site.sh;;
	db)        source $SCRIPTS/db.sh;;
	devserver) source $SCRIPTS/devserver.sh;;

	# server managment
	login)     ssh $user@$ip;;
	upload)    upload_file $@;;
	restart)   restart_service $@;;
	reboot)    ssh -t $user@$ip 'sudo reboot';;
	info)      show_info;;
	adduser)   add_user $@;;
	addkey)    add_sshkey $@;;
	autorenew) auto_renew_certs;;
	log:cat)   ssh -t $user@$ip 'sudo cat /opt/tomcat/logs/catalina.out';;
	log:tail)  ssh -t $user@$ip 'sudo tail -f /opt/tomcat/logs/catalina.out';;
	ping)      ping -c5 $ip;;
	run)       ssh -t $user@$ip "$@";;
	destroy) destroy_server;;

	credentials)
		if [[ -f $DATA_DIR/credentials.txt ]] ; then
			cat $DATA_DIR/credentials.txt
		else
			echo 'No credentials found.'
		fi;;

	bash-completion)
		sed -e s/{{scriptname}}/$(basename $0)/g $SCRIPTS/bash_completion.sh
		;;

	*) show_usage;;
esac
